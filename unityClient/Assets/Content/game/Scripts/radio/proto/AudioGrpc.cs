// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Audio.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Com.Skw.ProtoBean {
  /// <summary>
  ///传入一个用户list。向这个list里的用户发送实时语音到服务器。
  /// </summary>
  public static partial class IAudioTransform
  {
    static readonly string __ServiceName = "com.skw.protoBean.IAudioTransform";

    static readonly grpc::Marshaller<global::Com.Skw.ProtoBean.SendBean> __Marshaller_com_skw_protoBean_SendBean = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Skw.ProtoBean.SendBean.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.Skw.ProtoBean.Ok> __Marshaller_com_skw_protoBean_Ok = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Skw.ProtoBean.Ok.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.Skw.ProtoBean.AskReq> __Marshaller_com_skw_protoBean_AskReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Skw.ProtoBean.AskReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.Skw.ProtoBean.Audio> __Marshaller_com_skw_protoBean_Audio = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Skw.ProtoBean.Audio.Parser.ParseFrom);

    static readonly grpc::Method<global::Com.Skw.ProtoBean.SendBean, global::Com.Skw.ProtoBean.Ok> __Method_GetAudio = new grpc::Method<global::Com.Skw.ProtoBean.SendBean, global::Com.Skw.ProtoBean.Ok>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "GetAudio",
        __Marshaller_com_skw_protoBean_SendBean,
        __Marshaller_com_skw_protoBean_Ok);

    static readonly grpc::Method<global::Com.Skw.ProtoBean.AskReq, global::Com.Skw.ProtoBean.Audio> __Method_SendAudio = new grpc::Method<global::Com.Skw.ProtoBean.AskReq, global::Com.Skw.ProtoBean.Audio>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SendAudio",
        __Marshaller_com_skw_protoBean_AskReq,
        __Marshaller_com_skw_protoBean_Audio);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Com.Skw.ProtoBean.AudioReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IAudioTransform</summary>
    public abstract partial class IAudioTransformBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Com.Skw.ProtoBean.Ok> GetAudio(grpc::IAsyncStreamReader<global::Com.Skw.ProtoBean.SendBean> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SendAudio(global::Com.Skw.ProtoBean.AskReq request, grpc::IServerStreamWriter<global::Com.Skw.ProtoBean.Audio> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IAudioTransform</summary>
    public partial class IAudioTransformClient : grpc::ClientBase<IAudioTransformClient>
    {
      /// <summary>Creates a new client for IAudioTransform</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public IAudioTransformClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IAudioTransform that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public IAudioTransformClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected IAudioTransformClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected IAudioTransformClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncClientStreamingCall<global::Com.Skw.ProtoBean.SendBean, global::Com.Skw.ProtoBean.Ok> GetAudio(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAudio(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Com.Skw.ProtoBean.SendBean, global::Com.Skw.ProtoBean.Ok> GetAudio(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_GetAudio, null, options);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Com.Skw.ProtoBean.Audio> SendAudio(global::Com.Skw.ProtoBean.AskReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendAudio(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Com.Skw.ProtoBean.Audio> SendAudio(global::Com.Skw.ProtoBean.AskReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SendAudio, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override IAudioTransformClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IAudioTransformClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(IAudioTransformBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAudio, serviceImpl.GetAudio)
          .AddMethod(__Method_SendAudio, serviceImpl.SendAudio).Build();
    }

  }
}
#endregion
